# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.

name: Comment Trigger

permissions:
  actions: write

on:
  issue_comment:
    types: [created]

env:
  GH_TOKEN: ${{ github.token }}

jobs:
  comment-trigger-job:
    name: "Comment trigger"
    runs-on: [self-hosted, ubuntu-20.04, main]
    if: (github.event.issue.pull_request && startswith(github.event.comment.body, 'Run'))
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Update jq
        run: |
          curl -OL https://github.com/jqlang/jq/releases/download/jq-1.7/jq-linux-amd64
          chmod +x jq-linux-amd64
          sudo mv jq-linux-amd64 /usr/bin/jq
      - name: Parse options
        run: | 
          OPTIONS=$(echo ${{ github.event.comment.body }} | grep -oP '(\-\-\w+)=(\w+|.*[^Ë˜])' || true )
          echo $OPTIONS
          if [ -z "$OPTIONS" ]; then
            echo "No options found"
            exit 0
          fi
          for option in $OPTIONS;
          do
            KEY=$(echo $option | grep -oP '^(.*?)(?=\=)')
            KEY_CLEAN=${KEY#--}
            VALUE=$(echo $option | grep -oP '(?<=\=)(.*)')
            echo $KEY_CLEAN=$VALUE >> $GITHUB_ENV
          done
      - name: Get Comment Body Without options
        run: |
          COMMENT_BODY_CLEAN="$(echo ${{ github.event.comment.body }} | grep -oP '^(.*?)(?= --|$)')"
          echo comment_body_clean=$COMMENT_BODY_CLEAN >> $GITHUB_ENV
      - name: Get Workflow ID
        run: |
          COMMENT_BODY="${{ env.comment_body_clean }}"
          REQUESTED_WORKFLOW_NAME="${COMMENT_BODY//Run /}"
          WORKFLOW_ID=$(gh api --paginate repos/${{ github.repository }}/actions/workflows | jq -e --arg REQUESTED_WORKFLOW_NAME "$REQUESTED_WORKFLOW_NAME" '.workflows[] | select(.name == $REQUESTED_WORKFLOW_NAME) | .id')
          echo workflow_id=$WORKFLOW_ID >> $GITHUB_ENV
          echo $COMMENT_BODY
      - name: Get Last Commit SHA
        run: |
          PR_SHA=$(gh api --paginate repos/${{ github.repository }}/pulls/${{ github.event.issue.number }}/commits | jq -e '.[-1].sha')
          echo pr_sha=$PR_SHA >> $GITHUB_ENV
      - name: Get Workflow Run For PR
        run: | 
          WORKFLOW_RUN_ID=$(gh api --paginate repos/${{ github.repository }}/actions/runs?head_sha=${{ env.pr_sha }} | jq -e --arg WORKFLOW_ID "${{ env.workflow_id }}" '.workflow_runs[] | select(.workflow_id == ($WORKFLOW_ID | tonumber)) | .id' || true)
          if [ -z "$WORKFLOW_RUN_ID" ]; then
            echo "No workflow run found for this PR"
            echo no_triggered_run=true >> $GITHUB_ENV
            exit 0
          fi
          echo workflow_run_id=$WORKFLOW_RUN_ID >> $GITHUB_ENV
      - name: Get Status and Conclusion for the WORKFLOW_RUN_ID
        if: env.no_triggered_run != 'true'
        run: | 
          read -r STATUS CONCLUSION <<<$(gh api --paginate repos/${{ github.repository }}/actions/runs/${{ env.workflow_run_id }} | jq -r -e '"\(.status) \(.conclusion)"')
          echo status=$STATUS >> $GITHUB_ENV
          echo conclusion=$CONCLUSION >> $GITHUB_ENV
      - name: Rerun Workflow
        if: (( env.conclusion == 'failure' && env.force != 'true') && env.no_triggered_run != 'true')
        run: |
          gh api repos/${{ github.repository }}/actions/runs/${{ env.workflow_run_id }}/rerun-failed-jobs -X POST
          echo "Rerun triggered"
      - name: Rerun Workflow -- Force
        if:  (env.force == 'true' && env.no_triggered_run != 'true')
        run: |
          gh api repos/${{ github.repository }}/actions/runs/${{ env.workflow_run_id }}/rerun -X POST
          echo "Rerun triggered"
      - name: Dispatch a Workflow
        if: (env.no_triggered_run == 'true')
        run: |
          UUID=$(cat /proc/sys/kernel/random/uuid)
          DATE_RUN=$(date +"%Y-%m-%dT%H:%M:%SZ" --utc)
          gh workflow run ${{ env.workflow_id }} -f uuid=$UUID
          echo "Workflow dispatched"
          echo uuid=$UUID >> $GITHUB_ENV
          echo dispatched=true >> $GITHUB_ENV
          echo date_run=$DATE_RUN >> $GITHUB_ENV
          DATE_NOW=$(date +"%Y-%m-%dT%H:%M:%SZ" --utc --date "+10 seconds")
          echo date_now=$DATE_NOW >> $GITHUB_ENV
      - name: Get Run ID -- Dispatched
        if: env.dispatched == 'true'
        run: |
          sleep 30
          #WORKFLOW_RUN_ID=$(gh api --paginate repos/${{ github.repository }}/actions/runs?event=workflow_dispatch&created=${{ env.date_run }}..${{ env.date_now }} | jq -e --arg UUID "${{ env.uuid }}" '.workflow_runs[] | select(.display_title == $UUID )| .id')
          echo $(gh api --paginate repos/${{ github.repository }}/actions/runs?event=workflow_dispatch&created=${{ env.date_run }}..${{ env.date_now }})

          echo $WORKFLOW_RUN_ID
          echo workflow_run_id=$WORKFLOW_RUN_ID >> $GITHUB_ENV
