# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.

name: Comment Trigger

on:
  issue_comment:
    types: [created]

env:
  GH_TOKEN: ${{ github.token }}

jobs:
  comment-trigger-job:
    name: "Comment trigger"
    runs-on: [self-hosted, ubuntu-20.04, main]
    if: (github.event.issue.pull_request && startswith(github.event.comment.body, 'Run'))
    steps:
      - name: Update jq
        run: |
          curl -OL https://github.com/jqlang/jq/releases/download/jq-1.7/jq-linux-amd64
          chmod +x jq-linux-amd64
          sudo mv jq-linux-amd64 /usr/bin/jq
      - name: Get Workflow ID
        run: |
          COMMENT_BODY="${{ github.event.comment.body }}"
          REQUESTED_WORKFLOW_NAME="${COMMENT_BODY//Run /}"
          WORKFLOW_ID=$(gh api --paginate repos/${{ github.repository }}/actions/workflows | jq -e --arg REQUESTED_WORKFLOW_NAME "$REQUESTED_WORKFLOW_NAME" '.workflows[] | select(.name == $REQUESTED_WORKFLOW_NAME) | .id')
          echo workflow_id=$WORKFLOW_ID >> $GITHUB_ENV
      - name: Get Last Commit SHA
        run: |
          PR_SHA=$(gh api --paginate repos/${{ github.repository }}/pulls/${{ github.event.issue.number }}/commits | jq -e '.[-1].sha')
          echo pr_sha=$PR_SHA >> $GITHUB_ENV
      - name: Get Workflow Run For PR
        run: | 
          WORKFLOW_RUN_ID=$(gh api --paginate repos/${{ github.repository }}/actions/runs?head_sha=${{ env.pr_sha }} | jq -e --arg WORKFLOW_ID "${{ env.workflow_id }}" '.workflow_runs[] | select(.workflow_id == ($WORKFLOW_ID | tonumber)) | .id')
          echo workflow_run_id=$WORKFLOW_RUN_ID >> $GITHUB_ENV
      - name: Get Status and Conclusion for the WORKFLOW_RUN_ID
        run: | 
          read -r STATUS CONCLUSION <<<$(gh api --paginate repos/${{ github.repository }}/actions/runs/${{ env.workflow_run_id }} | jq -r -e '"\(.status) \(.conclusion)"')
          echo status=$STATUS >> $GITHUB_ENV
          echo conclusion=$CONCLUSION >> $GITHUB_ENV
      - name: Rerun Workflow 
        if: ${{ env.conclusion == 'failure' }}
        run: |
          gh api repos/${{ github.repository }}/actions/runs/${{ env.workflow_run_id }}/rerun -X POST
          echo "Rerun triggered"